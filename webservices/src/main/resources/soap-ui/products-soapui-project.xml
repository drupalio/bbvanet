<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="products" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="products" type="rest" basePath="/czic/products" definitionUrl="file:/C:/Jhon/Entelgy/BLUE%20SPRING/WS/bbvaNet/bbvanet/webservices/src/main/resources/wadl/products.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Jhon/Entelgy/BLUE%20SPRING/WS/bbvaNet/bbvanet/webservices/src/main/resources/wadl/products.wadl"><con:part><con:url>file:/C:/Jhon/Entelgy/BLUE%20SPRING/WS/bbvaNet/bbvanet/webservices/src/main/resources/wadl/products.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:prefix1="urn:com:bbva:czic:dto:net">
  <grammars>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="urn:com:bbva:czic:dto:net" xmlns:ns1="urn:com:bbva:jee:arq:spring:core:servicing:utils" xmlns:tns="urn:com:bbva:czic:dto:net">
      <xs:import namespace="urn:com:bbva:jee:arq:spring:core:servicing:utils"/>
      <xs:element name="Activity" type="tns:Activity"/>
      <xs:element name="City" type="tns:City"/>
      <xs:element name="Conditions" type="tns:Conditions"/>
      <xs:element name="Country" type="tns:Country"/>
      <xs:element name="Function" type="tns:Function"/>
      <xs:element name="Location" type="tns:Location"/>
      <xs:element name="Office" type="tns:Office"/>
      <xs:element name="State" type="tns:State"/>
      <xs:complexType name="Conditions">
        <xs:sequence>
          <xs:element minOccurs="0" name="alias" type="xs:string"/>
          <xs:element minOccurs="0" name="category" type="xs:string"/>
          <xs:element minOccurs="0" name="description" type="xs:string"/>
          <xs:element minOccurs="0" name="openingDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="commission" type="xs:string"/>
          <xs:element minOccurs="0" name="office" type="tns:Office"/>
          <xs:element minOccurs="0" name="mobilizationConditions" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="activities" nillable="true" type="tns:Activity"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Office">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="location" type="tns:Location"/>
          <xs:element minOccurs="0" name="postalAddress" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Location">
        <xs:sequence>
          <xs:element minOccurs="0" name="city" type="tns:City"/>
          <xs:element minOccurs="0" name="country" type="tns:Country"/>
          <xs:element minOccurs="0" name="state" type="tns:State"/>
          <xs:element minOccurs="0" name="postalAddress" type="xs:string"/>
          <xs:element minOccurs="0" name="category" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="City">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Country">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="states" nillable="true" type="tns:State"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="State">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="cities" nillable="true" type="tns:City"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Activity">
        <xs:sequence>
          <xs:element minOccurs="0" name="operationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="executionDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="function" type="tns:Function"/>
          <xs:element minOccurs="0" name="amount" type="ns1:money"/>
          <xs:element minOccurs="0" name="reference" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Function">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="urn:com:bbva:jee:arq:spring:core:servicing:utils" xmlns:tns="urn:com:bbva:jee:arq:spring:core:servicing:utils">
      <xs:element name="money" type="tns:money"/>
      <xs:complexType name="money">
        <xs:sequence>
          <xs:element minOccurs="0" name="amount" type="xs:decimal"/>
          <xs:element minOccurs="0" name="currency" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </grammars>
  <resources base="http://localhost:8080/czic/products">
    <resource path="/V01" id="com.bbva.czic.products.facade.v01.impl.SrvProductsV01">
      <resource path="/{productId}/conditions">
        <param name="productId" style="template" type="xs:string"/>
        <method name="GET" id="getConditions">
          <request/>
          <response>
            <representation mediaType="application/json" element="prefix1:Conditions"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://Entelgy-101:8080/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="/V01" path="/V01"><con:settings/><con:parameters/><con:resource name="/{productId}/conditions" path="/{productId}/conditions"><con:settings/><con:parameters><con:parameter><con:name>productId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getConditions" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:urn="urn:com:bbva:czic:dto:net">urn:Conditions</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:restMockService port="8081" path="/" host="Entelgy-101" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/czic/products/V01" method="GET" resourcePath="/czic/products/V01"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/czic/products/V01/2031/conditions" method="GET" resourcePath="/czic/products/V01/2031/conditions"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"alias":"Alias Producto","category":"Categoria producto","description":"Descripcion del producto","openingDate":"Fecha de apertura","commission":"commison producto","office":{"code":"0073","name":"BBVA 23247","location":{"city":{"id":"123","name":"Bogota"},"country":{"id":"12","name":"Colombia"},"state":{"id":"123456","name":"Cundinamarca"},"postalAddress":"Direccion posta","category":"Kennedy"},"postalAddress":"Calle 36"},"mobilizationConditions":"Consiciones de movilizacion"}
</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>