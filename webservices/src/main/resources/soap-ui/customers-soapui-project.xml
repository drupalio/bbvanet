<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="customers" soapui-version="5.0.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="customers" type="rest" basePath="/czic/customers" definitionUrl="file:/C:/Users/Entelgy/bbvaNet/bbvanet/webservices/src/main/resources/wadl/customers.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/Entelgy/bbvaNet/bbvanet/webservices/src/main/resources/wadl/customers.wadl"><con:part><con:url>file:/C:/Users/Entelgy/bbvaNet/bbvanet/webservices/src/main/resources/wadl/customers.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <grammars>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="urn:com:bbva:czic:dto:net" xmlns:ns1="urn:com:bbva:jee:arq:spring:core:servicing:utils" xmlns:tns="urn:com:bbva:czic:dto:net">
      <xs:import namespace="urn:com:bbva:jee:arq:spring:core:servicing:utils"/>
      <xs:element name="AccMovementsResume" type="tns:AccMovementsResume"/>
      <xs:element name="CardCharge" type="tns:CardCharge"/>
      <xs:element name="EnumCardChargeCategory" type="tns:EnumCardChargeCategory"/>
      <xs:element name="EnumMonth" type="tns:EnumMonth"/>
      <xs:complexType name="CardCharge">
        <xs:sequence>
          <xs:element minOccurs="0" name="category" type="tns:EnumCardChargeCategory"/>
          <xs:element minOccurs="0" name="amount" type="ns1:money"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AccMovementsResume">
        <xs:sequence>
          <xs:element minOccurs="0" name="income" type="ns1:money"/>
          <xs:element minOccurs="0" name="outcome" type="ns1:money"/>
          <xs:element minOccurs="0" name="balance" type="ns1:money"/>
          <xs:element minOccurs="0" name="month" type="tns:EnumMonth"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="EnumCardChargeCategory">
        <xs:restriction base="xs:string">
          <xs:enumeration value="CHANNEL_SALES"/>
          <xs:enumeration value="LEISURE"/>
          <xs:enumeration value="OTHERS"/>
          <xs:enumeration value="BASIC_COMMERCE"/>
          <xs:enumeration value="GIFT_BOOK_DISC"/>
          <xs:enumeration value="CLOTHING"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EnumMonth">
        <xs:restriction base="xs:string">
          <xs:enumeration value="JANUARY"/>
          <xs:enumeration value="FEBRUARY"/>
          <xs:enumeration value="MARCH"/>
          <xs:enumeration value="APRIL"/>
          <xs:enumeration value="MAY"/>
          <xs:enumeration value="JUNE"/>
          <xs:enumeration value="JULY"/>
          <xs:enumeration value="AUGUST"/>
          <xs:enumeration value="SEPTEMBER"/>
          <xs:enumeration value="OCTOBER"/>
          <xs:enumeration value="NOVEMBER"/>
          <xs:enumeration value="DECEMBER"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="urn:com:bbva:jee:arq:spring:core:servicing:utils" xmlns:tns="urn:com:bbva:jee:arq:spring:core:servicing:utils">
      <xs:element name="money" type="tns:money"/>
      <xs:complexType name="money">
        <xs:sequence>
          <xs:element minOccurs="0" name="amount" type="xs:decimal"/>
          <xs:element minOccurs="0" name="currency" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </grammars>
  <resources base="http://localhost:8080/czic/customers">
    <resource path="/V01" id="com.bbva.czic.customers.facade.v01.SrvCustomersV01">
      <resource path="/{customerId}/accounts/movementsResume">
        <param name="customerId" style="template" type="xs:string"/>
        <method name="GET" id="listAccountsMovementsResume">
          <request/>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="/{customerId}/creditCard/cardCharges">
        <param name="customerId" style="template" type="xs:string"/>
        <method name="GET" id="listCreditCardsCharges">
          <request/>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://Entelgy-107:8080/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="/V01" path="/V01"><con:settings/><con:parameters/><con:resource name="/{customerId}/accounts/movementsResume" path=""><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - listAccountsMovementsResume" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8099</con:endpoint><con:request/><con:originalUri>http://localhost/czic/customers/V01//accounts/movementsResume</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="customerId" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="/{customerId}/creditCard/cardCharges" path="/{customerId}/creditCard/cardCharges"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - listCreditCardsCharges" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:restMockService port="8099" path="/" host="localhost" name="Mock Customer" docroot=""><con:settings/><con:properties/><con:restMockAction name="/czic/customers/V01" method="GET" resourcePath="/czic/customers/V01"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{
	"income": {
		"amount": 1000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 400000,
		"currency": "$"
	},
	"balance": {
		"amount": 1200000,
		"currency": "$"
	},
	"month": "JANUARY"
},
{
	"income": {
		"amount": 1500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 600000,
		"currency": "$"
	},
	"balance": {
		"amount": 1800000,
		"currency": "$"
	},
	"month": "FEBRUARY"
},
{
	"income": {
		"amount": 2000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 800000,
		"currency": "$"
	},
	"balance": {
		"amount": 2400000,
		"currency": "$"
	},
	"month": "MARCH"
},
{
	"income": {
		"amount": 2500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1000000,
		"currency": "$"
	},
	"balance": {
		"amount": 3000000,
		"currency": "$"
	},
	"month": "APRIL"
},
{
	"income": {
		"amount": 3000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1200000,
		"currency": "$"
	},
	"balance": {
		"amount": 3600000,
		"currency": "$"
	},
	"month": "MAY"
},
{
	"income": {
		"amount": 3500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1400000,
		"currency": "$"
	},
	"balance": {
		"amount": 4200000,
		"currency": "$"
	},
	"month": "JUNE"
},
{
	"income": {
		"amount": 4000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1600000,
		"currency": "$"
	},
	"balance": {
		"amount": 4800000,
		"currency": "$"
	},
	"month": "JULY"
},
{
	"income": {
		"amount": 4500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1800000,
		"currency": "$"
	},
	"balance": {
		"amount": 5400000,
		"currency": "$"
	},
	"month": "AUGUST"
},
{
	"income": {
		"amount": 5000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2000000,
		"currency": "$"
	},
	"balance": {
		"amount": 6000000,
		"currency": "$"
	},
	"month": "SEPTEMBER"
},
{
	"income": {
		"amount": 5500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2200000,
		"currency": "$"
	},
	"balance": {
		"amount": 6600000,
		"currency": "$"
	},
	"month": "OCTOBER"
},
{
	"income": {
		"amount": 6000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2400000,
		"currency": "$"
	},
	"balance": {
		"amount": 7200000,
		"currency": "$"
	},
	"month": "NOVEMBER"
},
{
	"income": {
		"amount": 6500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2600000,
		"currency": "$"
	},
	"balance": {
		"amount": 7800000,
		"currency": "$"
	},
	"month": "DECEMBER"
}]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/czic/customers/V01//accounts/movementsResume" method="GET" resourcePath="/czic/customers/V01//accounts/movementsResume"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{
	"income": {
		"amount": 1000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 400000,
		"currency": "$"
	},
	"balance": {
		"amount": 1200000,
		"currency": "$"
	},
	"month": "JANUARY"
},
{
	"income": {
		"amount": 1500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 600000,
		"currency": "$"
	},
	"balance": {
		"amount": 1800000,
		"currency": "$"
	},
	"month": "FEBRUARY"
},
{
	"income": {
		"amount": 2000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 800000,
		"currency": "$"
	},
	"balance": {
		"amount": 2400000,
		"currency": "$"
	},
	"month": "MARCH"
},
{
	"income": {
		"amount": 2500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1000000,
		"currency": "$"
	},
	"balance": {
		"amount": 3000000,
		"currency": "$"
	},
	"month": "APRIL"
},
{
	"income": {
		"amount": 3000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1200000,
		"currency": "$"
	},
	"balance": {
		"amount": 3600000,
		"currency": "$"
	},
	"month": "MAY"
},
{
	"income": {
		"amount": 3500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1400000,
		"currency": "$"
	},
	"balance": {
		"amount": 4200000,
		"currency": "$"
	},
	"month": "JUNE"
},
{
	"income": {
		"amount": 4000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1600000,
		"currency": "$"
	},
	"balance": {
		"amount": 4800000,
		"currency": "$"
	},
	"month": "JULY"
},
{
	"income": {
		"amount": 4500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 1800000,
		"currency": "$"
	},
	"balance": {
		"amount": 5400000,
		"currency": "$"
	},
	"month": "AUGUST"
},
{
	"income": {
		"amount": 5000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2000000,
		"currency": "$"
	},
	"balance": {
		"amount": 6000000,
		"currency": "$"
	},
	"month": "SEPTEMBER"
},
{
	"income": {
		"amount": 5500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2200000,
		"currency": "$"
	},
	"balance": {
		"amount": 6600000,
		"currency": "$"
	},
	"month": "OCTOBER"
},
{
	"income": {
		"amount": 6000000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2400000,
		"currency": "$"
	},
	"balance": {
		"amount": 7200000,
		"currency": "$"
	},
	"month": "NOVEMBER"
},
{
	"income": {
		"amount": 6500000,
		"currency": "$"
	},
	"outcome": {
		"amount": 2600000,
		"currency": "$"
	},
	"balance": {
		"amount": 7800000,
		"currency": "$"
	},
	"month": "DECEMBER"
}]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/czic/customers/V01//creditCard/cardCharges" method="GET" resourcePath="/czic/customers/V01//creditCard/cardCharges"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>